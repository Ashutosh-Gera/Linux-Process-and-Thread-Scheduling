diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index f6b5779..463ad60 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -369,7 +369,7 @@
 448	common	process_mrelease		sys_process_mrelease
 449	common	futex_waitv				sys_futex_waitv
 450	common	set_mempolicy_home_node	sys_set_mempolicy_home_node
-
+451	common	kernel_2d_memcpy	sys_kernel_2d_memcpy
 #
 # Due to a historical design error, certain syscalls are numbered differently
 # in x32 as compared to native x86_64.  These syscalls have numbers 512-547.
diff --git a/kernel/sys.c b/kernel/sys.c
index ef1a78f..5928b13 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -199,7 +199,18 @@ static int set_one_prio(struct task_struct *p, int niceval, int error)
 out:
 	return error;
 }
-
+SYSCALL_DEFINE4(kernel_2d_memcpy, float*, mat1, float*, mat2, int, row, int, col){
+	float matrix[row][col];
+	long a = __copy_from_user(matrix,mat1,sizeof(matrix));
+	if (a<0 || a==sizeof(matrix)){
+		return -EFAULT;
+	}
+	long b = __copy_to_user(mat2,matrix,sizeof(matrix));
+	if(b<0 || b==sizeof(matrix)){
+		return -EFAULT;
+	}
+	return 0;
+}
 SYSCALL_DEFINE3(setpriority, int, which, int, who, int, niceval)
 {
 	struct task_struct *g, *p;
